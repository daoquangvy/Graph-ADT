Author:  Machunde Tandasi
Date:    10-28-2014
Program: Graph

PROGRAM DESCRIPTION
   This program is a representation of a templated type Graph. A Graph can be directed,
   undirected, weighted, unweighted, or both directional and weighted, and vice versa.

PROGRAM DESIGN
   This program uses a struct Vertex that represent a vertex. a vertex has
   its info, its index in the graph, the number of vertices it has adjacent to 
   it, and an array of the vertices adjacent to it that are of ConnectedVertice type in
   a struct.
   A Graph object can be created in 4 ways, eg.
      Graph<Type> map(DIRECTED,WEIGHTED);
      Graph<Type> map(WEIGHTED,DIRECTED); // same as previous
      Graph<Type> graph(DIRECTED); // DIRECTED and UNWEIGHTED
      Graph<Type> graph(WEIGHTED); // UNDIRECTED and WEIGHTED
      Graph<Type> graph; // UNDIRECTED and UNWEIGHTED 
      etc, Just pass your wishd graph type in the array and the program will do the rest.
      
      Type referes to a Type of an object.
      
      the maximum number of vertices in the graph is 100.

BUILDING THE PROGRAM
   This program was written in C++ and distributed to be built on a 
   Linux system.  To build the program, type 'make' to create the 
   executable called 'prog5' without quotes.
   
RUNNING THE PROGRAM
   This program runs in the terminal. Depending on your terminal setting, 
   to run the program you should type either prog5 or ./prog5 at the command prompt 
   after building the program and click
   return.

PROGRAM INPUT
   none - so far, all the data required by the program date is manually written
   in the main function.

PROGRAM OUTPUT
   The program outputs Array objects and the results of different
   valid Array object computations created by the user in the main function.
   expression.
   
FILE INDEX
        file               function(s)        					description
        --------------     -----------------  					-----------------------------------
	Graph.h		    Graph()						the default constructor.
			    Graph(Direction, Weight)				the overloaded constructor with direction and weight
			    Graph(Weight, Direction)
			    Graph(Direction)					the overloaded constructor with direction
			    Graph(Weight)					the overloaded constructor with weight
			    Graph& operator=(const Graph<Type>& arg)		overloading the assignment operator
			    ~Graph()						destructor
			    void destroy()					destroys the object when it goes out of scope
			    bool isEmpty() 					checks if the graph is empty
			    bool isFull()					checks is the graph is full
			    bool isAdjacentTo(fromVertex,toVertex)		checks if theres is an edge between two vertices
			    int edgeWeight(fromVertex,toVertex)		returns the weight of the edge between 2 vertices
			    int edgeCount() const				returns the number of edges in the graph
			    int vertexCount() const				returns the number of vertices in the graph
			    void insertVertex(Vertex)				inserts a vertex in the graph
			    void insertEdge(fromVertex,toVertex, int weight=1) inserts an edge between 2 vertices
			    void deleteEdge(fromVertex,toVertex);		deletes an edge between 2 vertices
			    void deleteVertex(Vertex)				deletes a vertex
			    int findVertex(Vertex) const			finds the position  of the vertex in the graph	
			    void dump() const;					prints the whole graph												
      ---------------------------------------------------------------------------------------------------

      main.cpp                  main              calls all other functions.

      makefile                                    builds an executable.
  
  
PROGRAM TESTING
   The program was tested with several Graph objects created in the main class.

   1. Creating Graph objects - passed
	cities object was created and various vertices were passed to it. edges were created.
	cities was also tested in different graph types, including, directed, undirected, weighted,
	 and unweighted graphs.

   2. Different types - passed
	Different graphs of different types were created to test templated type and successfully passed.

   3. Assignment operator -  passed
	The assignment operator was tested by assigning a new Graph object the contents of an existing Graph
	object and passed successfully.

BUGS
	No known bugs lately.

	Any errors should apart from the ones reported above shoul be reported to:
	tandasima@mnstate.edu

